/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    //id 'java-library'
    id 'java'
    id 'eclipse'
    id 'application'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    //jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:20.0'

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
    
    //compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    compile 'org.apache.httpcomponents:httpclient:4.5.1'
    //compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.jsoup:jsoup:1.10.2'
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile 'net.sourceforge.tess4j:tess4j:3.4.0'
    compile 'com.alibaba:fastjson:1.2.36'
    
}
eclipse {
    classpath {
       downloadSources = false
       downloadJavadoc = false
    }
}
mainClassName = 'com.dc.start.Start'
run {
    if ( project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
    }
}
version = 'beta'
jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}
//指定编译源码的字符集
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
//覆盖默认输出路径
sourceSets {
  main {
    output.resourcesDir  "${project.buildDir}/resources"
    java {
    	srcDirs = ["${project.projectDir}/src"]
//    	outputDir = "${project.buildDir}/classes"
    }
  }
}
println sourceSets.main.java.srcDirs

task copyJars(type: Copy) {
	from configurations.runtime
	into "${project.buildDir}/dcits/lib"
}

task copyClassesResources(type: Copy) {
	from "${project.buildDir}/classes/main","${project.buildDir}/resources"
	into "${project.buildDir}/dcits/classes"
}
task copyScript(type: Copy) {
	from "${project.projectDir}"
	into "${project.buildDir}/dcits"
	include 'start.sh','stop.sh'
}

task buildDcits(dependsOn: ['clean','build','copyJars','copyClassesResources','copyScript']) {
	group 'dcits'
	description 'Build a deployable project dcits'
}
build.mustRunAfter clean
